{"version":3,"sources":["components/Button.tsx","components/Input.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Button","props","onClick","callBack","title","Input","useState","error","setError","value","newTaskValue","onChange","e","setNewTaskValue","target","onKeyPress","key","addTask","style","color","Todolist","id","changeIsDone","setFilterHandler","changeFilter","tasks","map","mTasks","removeTask","type","checked","isDone","App","todoListId1","v1","todoListId2","filter","todoLists","setTodoLists","setTasks","todoId","el","newTask","arr","currentTarget","tl","className","filteredTasks","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.d6fdbac3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {taskType, typeFilter} from \"../App\";\r\n\r\ntype propsType = {\r\n        value?: string\r\n    callBack: () => void\r\n    title: string\r\n}\r\n\r\nexport const Button = (props: propsType) => {\r\n    return (\r\n        <button onClick={props.callBack}>{props.title}\r\n        </button>)\r\n}","import React, {Dispatch, KeyboardEvent, SetStateAction, useState} from \"react\";\r\ntype inputPropsType = {\r\n    addTask: (value: string) => void\r\n    setNewTaskValue: Dispatch<SetStateAction<string>>\r\n    newTaskValue: string\r\n}\r\n\r\nexport const Input = (props: inputPropsType) => {\r\n\r\n    const [error, setError] = useState<string|null>(null)\r\n    const onChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        props.setNewTaskValue(e.target.value)\r\n        setError(null)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            if (props.newTaskValue === '') {\r\n                setError('Empty input')\r\n                return\r\n            }\r\n            props.addTask(props.newTaskValue);\r\n            setError(null)\r\n        }\r\n            }\r\n\r\n    return (\r\n        <div>\r\n            <input value={props.newTaskValue} onChange={onChangeHandler} onKeyPress={onKeyPressHandler}/>\r\n            {error && <div style={{color: 'red'}}>{error}</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {useState, KeyboardEvent, MouseEvent, ChangeEvent} from 'react';\r\nimport {taskType, typeFilter} from \"./App\";\r\nimport {Button} from \"./components/Button\";\r\nimport {Input} from \"./components/Input\";\r\n\r\n\r\ntype PropsType = {\r\n    addTask:  (value: string, todoId: string) => void\r\n    id: string\r\n    title: string\r\n    tasks: Array<taskType>\r\n    removeTask: (el: string, todoId: string) => void\r\n    changeFilter: (filter: typeFilter, todoId: string) => void\r\n    changeIsDone: (e: React.ChangeEvent<HTMLInputElement>, todoId: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n    const [newTaskValue, setNewTaskValue] = useState('')\r\n\r\n    const addTask = (value: string) => {\r\nprops.addTask(newTaskValue, props.id)\r\n    }\r\n    const addTaskHandler = () => {\r\n        addTask(newTaskValue)\r\n    }\r\n    const changeIsDone = (e: ChangeEvent<HTMLInputElement>) => {\r\n      props.changeIsDone(e, props.id)\r\n    }\r\n\r\n    const removeTask = (id: string) => {\r\n        props.removeTask(id, props.id)\r\n    }\r\n    const setFilterHandler = (value: typeFilter) => {\r\n        props.changeFilter(value, props.id)\r\n    }\r\n\r\n    return <div>\r\n        <h3>{props.title}</h3>\r\n        <div>\r\n            <Input newTaskValue={newTaskValue} setNewTaskValue={setNewTaskValue} addTask={addTask}/>\r\n            <Button callBack={addTaskHandler} title={'+'}/>\r\n        </div>\r\n        <ul>\r\n\r\n            {props.tasks.map((mTasks) => {\r\n                return (\r\n                    <li key={mTasks.id}>\r\n                        <Button callBack={() => removeTask(mTasks.id)} title={\"x\"}/>\r\n\r\n                        <input id={mTasks.id} type=\"checkbox\" onChange={changeIsDone} checked={mTasks.isDone}/>\r\n                        <span>{mTasks.title}</span>\r\n                    </li>\r\n                )\r\n            })}\r\n\r\n\r\n        </ul>\r\n        <div>\r\n            <Button callBack={() => setFilterHandler('All')} title={'All'} />\r\n            <Button callBack={() => setFilterHandler('Active')} title={'Active'} />\r\n            <Button callBack={() => setFilterHandler('Completed')} title={'Completed'} />\r\n        </div>\r\n    </div>\r\n}\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {v1} from \"uuid\";\r\n\r\nexport type typeFilter = 'All' | 'Active' | 'Completed'\r\nexport type tasksType = {\r\n    [x: string]: Array<taskType>\r\n}\r\nexport type taskType = {\r\n\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\ntype todoListsTypes = {\r\n    id: string\r\n    title: string\r\n    filter: typeFilter\r\n}\r\n\r\n\r\nfunction App() {\r\n\r\n\r\n    const todoListId1 = v1()\r\n    const todoListId2 = v1()\r\n    const [todoLists, setTodoLists] = useState<Array<todoListsTypes>>([\r\n        {id: todoListId1, filter: \"All\", title: \"What to learn\"},\r\n        {id: todoListId2, filter: \"All\", title: \"What to buy\"},\r\n    ])\r\n\r\n    const [tasks, setTasks] = useState<tasksType>({\r\n        [todoListId1]: [{id: v1(), title: \"Hello world\", isDone: true},\r\n            {id: v1(), title: \"I am Happy\", isDone: false},\r\n            {id: v1(), title: \"Yo\", isDone: false}],\r\n        [todoListId2]: [{id: v1(), title: \"Hello world\", isDone: true},\r\n            {id: v1(), title: \"I am Happy\", isDone: false},\r\n            {id: v1(), title: \"Yo\", isDone: false}]\r\n    })\r\n    const removeTask = (id: string, todoId: string) => {\r\n        tasks[todoId] = tasks[todoId].filter((el) => el.id !== id)\r\n        return setTasks({...tasks})\r\n    }\r\n    const addTask = (value: string, todoId: string) => {\r\n        if (value === '') return\r\n        const newTask = {id: v1(), title: value, isDone: false}\r\n        return setTasks({...tasks, [todoId]: [newTask, ...tasks[todoId]]})\r\n    }\r\n    const changeIsDone = (e: ChangeEvent<HTMLInputElement>, todoId: string,) => {\r\n        let arr = tasks[todoId].map((el) => {\r\n            if (el.id === e.currentTarget.id) {\r\n                el.isDone = !el.isDone\r\n                return el\r\n            }\r\n            return el\r\n        })\r\n        setTasks({...tasks, [todoId]: arr})\r\n    }\r\n\r\n    const changeFilter = (filter: typeFilter, todoId: string) => {\r\n\r\n        setTodoLists([...todoLists.map(tl => tl.id === todoId ? {...tl, filter: filter} : tl) ])\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {todoLists.map((tl) => {\r\n                let filteredTasks = tasks[tl.id]\r\n\r\n                if (tl.filter === 'Active') {\r\n                    filteredTasks = tasks[tl.id].filter(el => !el.isDone)\r\n                }\r\n                if (tl.filter === 'Completed') {\r\n                    filteredTasks = tasks[tl.id].filter(el => el.isDone)\r\n                }\r\n                return <Todolist\r\n                    addTask={addTask}\r\n                    key={tl.id}\r\n                    id={tl.id}\r\n                    changeIsDone={changeIsDone}\r\n                    tasks={filteredTasks}\r\n                    changeFilter={changeFilter}\r\n                    title={tl.title}\r\n                    removeTask={removeTask}\r\n                />\r\n            })}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}