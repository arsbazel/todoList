{"version":3,"sources":["serviceWorker.ts","store/auth-reducer.ts","types/todoListTypes.ts","store/todo-reducer.ts","types/tasksTypes.ts","store/tasks-reducer.ts","store/root-Reducer.ts","pages/Login.tsx","components/EditableSpan.tsx","components/AddItemForm.tsx","components/Todolist.tsx","store/action-creators/todoActions.ts","store/action-creators/tasksActions.ts","hooks/getFilteredTasks.ts","hooks/useRemoteState.ts","hooks/useTypedSelector.ts","router/index.ts","App.tsx","components/AppRouter.tsx","components/Header.tsx","store/action-creators/authActions.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","authConstants","REMOVE_TODOLIST","FETCHING_TODOLIST","ADD_TODOLIST","CHANGE_TODOLIST_TITLE","CHANGE_TODOLIST_FILTER","initialState","id","filter","title","FETCH_TASKS","ADD_TASK","REMOVE_TASK","IS_DONE_TOGGLE","CHANGE_TASK_TITLE","initialTasks","v1","isDone","isAuth","rootReducer","combineReducers","todo","state","action","type","el","payload","map","tl","tasks","value","todoId","newTask","copy","e","currentTarget","t","taskId","text","auth","console","log","SET_AUTH","theme","createTheme","EditableSpan","changeTitle","useState","editMode","setEditMode","onChange","autoFocus","onBlur","onDoubleClick","AddItemForm","props","setTitle","error","setError","addItem","trim","Paper","sx","display","alignItems","width","TextField","size","variant","onKeyPress","key","label","helperText","IconButton","disabled","color","onClick","AddBox","Todolist","dispatch","useDispatch","setFilterHandler","p","style","flexDirection","aria-label","addTask","mTasks","isDoneToggle","checked","changeTaskTitle","ButtonGroup","Button","todoListId1","todoListId2","useTypedSelector","useSelector","publicRoutes","path","exact","component","ThemeProvider","Container","maxWidth","CssBaseline","Box","marginTop","Avatar","m","bgcolor","Typography","onSubmit","event","preventDefault","data","FormData","email","get","password","noValidate","mt","margin","required","fullWidth","name","autoComplete","FormControlLabel","control","Checkbox","mb","Grid","container","item","xs","Link","href","privateRoutes","initialTodoLists","useRemoteState","useEffect","fetchTasks","className","length","filteredTasks","getFilteredTasks","AppRouter","route","from","to","MenuAppBar","React","anchorEl","setAnchorEl","setIsAuth","setAuth","handleClose","flexGrow","AppBar","position","Toolbar","edge","mr","aria-controls","aria-haspopup","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","open","onClose","MenuItem","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.94df79d9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","\r\nconst initialState = {\r\n    isAuth: false,\r\n}\r\n\r\n\r\nexport enum authConstants {\r\n    SET_AUTH = \"SET_AUTH\",\r\n}\r\n\r\nexport interface authStateType {\r\n    isAuth: boolean\r\n}\r\n\r\nexport interface setAuthType {\r\n    type: authConstants.SET_AUTH,\r\n    payload: boolean,\r\n}\r\n\r\nexport const authReducer = (state = initialState, action: setAuthType) : authStateType => {\r\n    console.log(action)\r\n    switch (action.type) {\r\n\r\n        case authConstants.SET_AUTH: {\r\n            return {...state,isAuth: action.payload}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}","import {removeTodoList} from \"../store/action-creators/todoActions\";\r\n\r\n\r\nexport interface todoListTypes {\r\n    id: string\r\n    title: string\r\n    filter: string\r\n}\r\n\r\n\r\nexport type typeFilter = 'ALL' | 'ACTIVE' | 'COMPLETED'\r\n\r\nexport const REMOVE_TODOLIST = \"REMOVE_TODOLIST\"\r\nexport const FETCHING_TODOLIST = \"FETCHING_TODOLIST\"\r\nexport const ADD_TODOLIST = \"ADD_TODOLIST\"\r\nexport const CHANGE_TODOLIST_TITLE = \"CHANGE_TODOLIST_TITLE\"\r\nexport const CHANGE_TODOLIST_FILTER = \"CHANGE_TODOLIST_FILTER\"\r\n\r\nexport type todoListsActionTypes = changeTodolistFilterType |removeTodoListType | addTodolistType | fetchingTodolistsType | changeTodolistTitleType\r\n\r\nexport interface removeTodoListType {\r\n    id: string,\r\n    type: typeof REMOVE_TODOLIST\r\n}\r\nexport interface addTodolistType {\r\n    id: string,\r\n    type: typeof ADD_TODOLIST\r\n    title: string\r\n}\r\nexport interface fetchingTodolistsType {\r\n    payload: Array<todoListTypes>\r\n    type: typeof FETCHING_TODOLIST\r\n}\r\nexport interface changeTodolistTitleType {\r\n    title: string\r\n    id: string,\r\n    type: typeof CHANGE_TODOLIST_TITLE\r\n}\r\nexport interface changeTodolistFilterType {\r\n    id: string,\r\n    filter: string,\r\n    type: typeof CHANGE_TODOLIST_FILTER\r\n}\r\n\r\n\r\n\r\n","import {\r\n    CHANGE_TODOLIST_FILTER,\r\n    CHANGE_TODOLIST_TITLE,\r\n    FETCHING_TODOLIST,\r\n    REMOVE_TODOLIST,\r\n    todoListsActionTypes,\r\n    todoListTypes\r\n} from \"../types/todoListTypes\";\r\nimport {useRemoteState} from \"../hooks/useRemoteState\";\r\n\r\n\r\nconst initialState: Array<todoListTypes> = [ {id: 'todoListId1', filter: \"ALL\", title: \"What to learn\"}]\r\n\r\n\r\nexport const todoReducer = (state: Array<todoListTypes> = initialState, action: todoListsActionTypes): todoListTypes[] => {\r\n    switch (action.type) {\r\n        case REMOVE_TODOLIST : {\r\n            return [...state.filter((el) => el.id !== action.id)]\r\n        }\r\n        case FETCHING_TODOLIST: {\r\n            return [...action.payload]\r\n        }\r\n        case CHANGE_TODOLIST_FILTER: {\r\n            return [...state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)]\r\n        }\r\n        case CHANGE_TODOLIST_TITLE: {\r\n            return [...state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)]\r\n        }\r\n        default : {\r\n            return state\r\n        }\r\n\r\n    }\r\n}","import {ChangeEvent} from \"react\"\r\nimport {addTodolistType, removeTodoListType} from \"./todoListTypes\";\r\n\r\nexport interface taskType {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport interface tasksType {\r\n    [x: string]: Array<taskType>\r\n}\r\n\r\nexport const FETCH_TASKS = \"FETCH_TASKS\"\r\nexport const ADD_TASK = \"ADD_TASK\"\r\nexport const REMOVE_TASK = \"REMOVE_TASK\"\r\nexport const IS_DONE_TOGGLE = \"IS_DONE_TOGGLE\"\r\nexport const CHANGE_TASK_TITLE = \"CHANGE_TASK_TITLE\"\r\n\r\n// export enum tasksActions {\r\n//  FETCH_TASKS = \"FETCH_TASKS\",\r\n// ADD_TASK = \"ADD_TASK\",\r\n// //     REMOVE_TASK = \"REMOVE_TASK\",\r\n// //     IS_DONE_TOGGLE = \"IS_DONE_TOGGLE\",\r\n// //     CHANGE_TASK_TITLE = \"CHANGE_TASK_TITLE\"\r\n// }\r\n\r\n\r\nexport type actionTypes = removeTodoListType\r\n    | addTaskType\r\n    | fetchTasksACType\r\n    | isDoneToggleACType\r\n    | removeTaskACType\r\n    | changeTaskTitleACType\r\n| addTodolistType\r\n\r\ninterface addTaskType {\r\n    type: typeof ADD_TASK,\r\n    todoId: string,\r\n    value: string\r\n}\r\n\r\ninterface fetchTasksACType {\r\n    type: typeof FETCH_TASKS,\r\n    tasks: tasksType\r\n}\r\n\r\ninterface isDoneToggleACType {\r\n    e: ChangeEvent<HTMLInputElement>,\r\n    type: typeof IS_DONE_TOGGLE,\r\n    todoId: string\r\n}\r\n\r\ninterface removeTaskACType {\r\n    id: string,\r\n    type: typeof REMOVE_TASK,\r\n    todoId: string\r\n}\r\n\r\ninterface changeTaskTitleACType {\r\n    text: string,\r\n    type: typeof CHANGE_TASK_TITLE,\r\n    todoId: string,\r\n    taskId: string\r\n}\r\n","import {v1} from \"uuid\";\r\nimport {\r\n    actionTypes, ADD_TASK,\r\n    CHANGE_TASK_TITLE, FETCH_TASKS,\r\n    IS_DONE_TOGGLE,\r\n    REMOVE_TASK,\r\n    tasksType\r\n} from \"../types/tasksTypes\";\r\nimport {ADD_TODOLIST, REMOVE_TODOLIST} from \"../types/todoListTypes\";\r\n\r\n\r\nconst initialTasks: tasksType = {['todoListId1']: [{id: v1(), title: \"Hello world\", isDone: true}]}\r\n\r\nexport const tasksReducer = (tasks = initialTasks, action: actionTypes): tasksType => {\r\n    switch (action.type) {\r\n        case FETCH_TASKS :\r\n            return {\r\n                ...tasks,\r\n                ...action.tasks\r\n            }\r\n        case ADD_TASK: {\r\n            if (action.value === '') return tasks\r\n            if (action.todoId) {\r\n                const newTask = {id: v1(), title: action.value, isDone: false}\r\n                return {...tasks, [action.todoId]: [newTask, ...tasks[action.todoId]]}\r\n            }\r\n            return tasks\r\n        }\r\n        case REMOVE_TODOLIST : {\r\n            const copy = {...tasks}\r\n            delete copy[action.id]\r\n            return copy\r\n        }\r\n        case ADD_TODOLIST: {\r\n            return {...tasks, [action.id]: []}\r\n        }\r\n        case REMOVE_TASK : {\r\n            return {\r\n                ...tasks, [action.todoId]: tasks[action.todoId].filter((el) => el.id !== action.id)\r\n            }\r\n        }\r\n\r\n        case IS_DONE_TOGGLE : {\r\n            return {\r\n                ...tasks, [action.todoId]: tasks[action.todoId]\r\n                    .map((el) => {\r\n                            return el.id === action.e.currentTarget.id ?\r\n                                {...el, isDone: !el.isDone} : el\r\n                        }\r\n                    )\r\n            }\r\n        }\r\n        case CHANGE_TASK_TITLE : {\r\n            return {\r\n                ...tasks, [action.todoId]: tasks[action.todoId].map((t) => {\r\n                    return t.id === action.taskId ? {...t, title: action.text} : t\r\n                })\r\n            }\r\n        }\r\n\r\n        default : {\r\n            return tasks\r\n        }\r\n\r\n    }\r\n}\r\n","\r\nimport {combineReducers} from \"redux\";\r\nimport {todoReducer} from \"./todo-reducer\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\nimport {authReducer} from \"./auth-reducer\";\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>\r\n\r\n\r\nexport const rootReducer= combineReducers({\r\n    todo: todoReducer,\r\n    tasks: tasksReducer,\r\n    auth: authReducer,\r\n})","import * as React from 'react';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Button from '@mui/material/Button';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport TextField from '@mui/material/TextField';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport Link from '@mui/material/Link';\r\nimport Grid from '@mui/material/Grid';\r\nimport Box from '@mui/material/Box';\r\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\r\nimport Typography from '@mui/material/Typography';\r\nimport Container from '@mui/material/Container';\r\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\r\nimport {FC} from \"react\";\r\n\r\n\r\nconst theme = createTheme();\r\n\r\nexport const Login: FC = () => {\r\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        const data = new FormData(event.currentTarget);\r\n        // eslint-disable-next-line no-console\r\n        console.log({\r\n            email: data.get('email'),\r\n            password: data.get('password'),\r\n        });\r\n    };\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n                <CssBaseline />\r\n                <Box\r\n                    sx={{\r\n                        marginTop: 8,\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        alignItems: 'center',\r\n                    }}\r\n                >\r\n                    <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\r\n                        <LockOutlinedIcon />\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Sign in\r\n                    </Typography>\r\n                    <Box component=\"form\" onSubmit={handleSubmit} noValidate sx={{ mt: 1 }}>\r\n                        <TextField\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"email\"\r\n                            label=\"Email Address\"\r\n                            name=\"email\"\r\n                            autoComplete=\"email\"\r\n                            autoFocus\r\n                        />\r\n                        <TextField\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            name=\"password\"\r\n                            label=\"Password\"\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            autoComplete=\"current-password\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n                            label=\"Remember me\"\r\n                        />\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            sx={{ mt: 3, mb: 2 }}\r\n                        >\r\n                            Sign In\r\n                        </Button>\r\n                        <Grid container>\r\n                            <Grid item xs>\r\n                                <Link href=\"#\" variant=\"body2\">\r\n                                    Forgot password?\r\n                                </Link>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Link href=\"#\" variant=\"body2\">\r\n                                    {\"Don't have an account? Sign Up\"}\r\n                                </Link>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                </Box>\r\n            </Container>\r\n        </ThemeProvider>\r\n    );\r\n};","import React, {ChangeEvent, useState} from \"react\";\r\n\r\ninterface Props {\r\n    changeTitle: (title: string) => void\r\n    text: string\r\n}\r\n\r\n\r\nexport const EditableSpan: React.FC<Props> = ({text, changeTitle}) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        changeTitle(e.currentTarget.value)\r\n    }\r\nreturn (\r\n    editMode ?\r\n        <input onChange={onChangeHandler} autoFocus value={text} onBlur={() => setEditMode(false)} /> :\r\n        <span onDoubleClick={() => setEditMode(true)}>{text}</span>\r\n)\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {AddBox} from \"@mui/icons-material\";\r\nimport {IconButton, Paper, TextField} from \"@mui/material\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n\r\n        if (e.key === \"Enter\" && title.trim() !== \"\") {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return  <Paper\r\n        sx={{ display: 'flex', alignItems: 'center', width: 200}}\r\n    >\r\n\r\n        <TextField\r\n            size='small'\r\n            variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n\r\n        />\r\n        <IconButton disabled={title.trim() === \"\"} color=\"primary\" onClick={addItem}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </Paper>\r\n}\r\n","import React from 'react';\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {ButtonGroup, Button, Paper, IconButton} from \"@mui/material\";\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addTask, changeTaskTitle, isDoneToggle, removeTask} from \"../store/action-creators/tasksActions\";\r\nimport {taskType} from \"../types/tasksTypes\";\r\nimport {typeFilter} from \"../types/todoListTypes\";\r\nimport {changeTodoListFilter, changeTodoListTitle, removeTodoList} from \"../store/action-creators/todoActions\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<taskType>\r\n}\r\nexport function Todolist(props: PropsType) {\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const setFilterHandler = (value: typeFilter) => {\r\n       dispatch(changeTodoListFilter(props.id, value))\r\n    }\r\n    return <Paper\r\n        sx={{p: '10px 10px', display: 'flex', alignItems: 'center'}}>\r\n\r\n        <div style={{display: 'flex', alignItems: 'center', flexDirection: 'column'}}>\r\n            <EditableSpan\r\n                text={props.title}\r\n                changeTitle={(text) => dispatch(changeTodoListTitle(props.id, text))}>\r\n                <IconButton size=\"small\" onClick={() => dispatch(removeTodoList(props.id))}\r\n                            aria-label=\"delete\">\r\n                    <DeleteIcon/>\r\n                </IconButton></EditableSpan>\r\n            <div>\r\n                <AddItemForm addItem={(value: string) => {\r\n                    dispatch(addTask(value, props.id))\r\n                }}/>\r\n            </div>\r\n            <ul> {props.tasks.map((mTasks) => {\r\n                    return (\r\n                        <li key={mTasks.id}>\r\n                            <input id={mTasks.id} type=\"checkbox\" onChange={(e) => dispatch(isDoneToggle(e, props.id))}\r\n                                   checked={mTasks.isDone}/>\r\n                            <EditableSpan\r\n                                text={mTasks.title}\r\n                                changeTitle={(text) => dispatch(changeTaskTitle(text, props.id, mTasks.id))} />\r\n                            <IconButton size=\"small\" onClick={() => dispatch(removeTask(mTasks.id, props.id))}\r\n                                        aria-label=\"delete\">\r\n                                <DeleteIcon/>\r\n                            </IconButton>\r\n                        </li>\r\n                    )\r\n                })\r\n            }\r\n            </ul>\r\n            <div>\r\n                <ButtonGroup variant=\"contained\" aria-label=\"outlined primary button group\">\r\n                    <Button onClick={() => setFilterHandler(\"ALL\")}>All</Button>\r\n                    <Button onClick={() => setFilterHandler(\"ACTIVE\")}>Active</Button>\r\n                    <Button onClick={() => setFilterHandler(\"COMPLETED\")}>Completed</Button>\r\n                </ButtonGroup>\r\n            </div>\r\n        </div>\r\n    </Paper>\r\n}\r\n","import {\r\n    ADD_TODOLIST,\r\n    addTodolistType, CHANGE_TODOLIST_FILTER,\r\n    CHANGE_TODOLIST_TITLE, changeTodolistFilterType, changeTodolistTitleType,\r\n    FETCHING_TODOLIST,\r\n    fetchingTodolistsType,\r\n    REMOVE_TODOLIST,\r\n    removeTodoListType,\r\n    todoListTypes, typeFilter\r\n} from \"../../types/todoListTypes\";\r\n\r\n\r\nexport const removeTodoList = (id: string) : removeTodoListType  => {\r\n    return {type: REMOVE_TODOLIST, id}\r\n}\r\nexport const changeTodoListTitle = (id: string, title: string): changeTodolistTitleType=> {\r\n    return {type: CHANGE_TODOLIST_TITLE, id, title}\r\n}\r\nexport const changeTodoListFilter = (id: string, filter: typeFilter): changeTodolistFilterType => {\r\n    return {type: CHANGE_TODOLIST_FILTER, id, filter}\r\n}\r\nexport const addTodolist = (id: string, title: string) : addTodolistType => {\r\n    return {type: ADD_TODOLIST, id, title}\r\n}\r\nexport const fetchingTodolists = (payload: Array<todoListTypes>): fetchingTodolistsType => {\r\n    return {type: FETCHING_TODOLIST, payload}\r\n}","\r\nimport {ChangeEvent} from \"react\";\r\nimport {\r\n    ADD_TASK, CHANGE_TASK_TITLE,\r\n    FETCH_TASKS, IS_DONE_TOGGLE,\r\n    REMOVE_TASK,\r\n    tasksType\r\n} from \"../../types/tasksTypes\";\r\n\r\n\r\n\r\nexport const removeTask = (id: string, todoId: string) => {\r\n    return {\r\n        type: REMOVE_TASK, id, todoId\r\n    }\r\n}\r\nexport const fetchTasks = (tasks: tasksType)  => {\r\n    return {type: FETCH_TASKS, tasks} as const\r\n}\r\nexport const addTask = (value: string, todoId: string) => {\r\n    return {type: ADD_TASK, value: value, todoId} as const\r\n}\r\nexport const isDoneToggle = (e: ChangeEvent<HTMLInputElement>, todoId: string) => {\r\n    return {type: IS_DONE_TOGGLE, e, todoId} as const\r\n}\r\n\r\nexport const changeTaskTitle = (text: string ,todoId: string, taskId: string) => {\r\n    return {type: CHANGE_TASK_TITLE, text, todoId, taskId} as const\r\n\r\n}\r\n\r\n\r\n","import {taskType} from \"../types/tasksTypes\";\r\n\r\n\r\nexport const getFilteredTasks = (filter: string, tasks: Array<taskType>) => {\r\n    if (filter === 'ACTIVE') {\r\n        return tasks.filter(el => !el.isDone)\r\n    }\r\n    if (filter === 'COMPLETED') {\r\n        return tasks.filter(el => el.isDone)\r\n    }\r\n    else return tasks\r\n}","import {v1} from \"uuid\";\r\nimport {tasksType} from \"../types/tasksTypes\";\r\nimport {todoListTypes} from \"../types/todoListTypes\";\r\n\r\nconst todoListId1 = v1()\r\nconst todoListId2 = v1()\r\n\r\nexport const useRemoteState = (): {initialTasks:tasksType, initialTodoLists: Array<todoListTypes>} => {\r\n\r\n    const initialTodoLists = [\r\n        {id: todoListId1, filter: \"ALL\", title: \"What to learn\"},\r\n        {id: todoListId2, filter: \"ALL\", title: \"What to buy\"},\r\n    ]\r\n\r\n    const initialTasks = {\r\n        [todoListId1]: [{id: v1(), title: \"Hello world\", isDone: true},\r\n            {id: v1(), title: \"I am Happy\", isDone: false},\r\n            {id: v1(), title: \"Yo\", isDone: false}],\r\n        [todoListId2]: [{id: v1(), title: \"Hello world\", isDone: true},\r\n            {id: v1(), title: \"I am Happy\", isDone: false},\r\n            {id: v1(), title: \"Yo\", isDone: false}]\r\n    }\r\n    return {initialTasks, initialTodoLists}\r\n}","import {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\nimport {RootState} from \"../store/root-Reducer\";\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector","import React from 'react';\r\nimport {Login} from \"../pages/Login\";\r\nimport App from \"../App\";\r\n\r\nexport const LOGIN = '/login'\r\nexport const APP = '/'\r\n\r\nexport interface routeType {\r\n    path: string;\r\n    component: React.FC;\r\n    exact? : boolean\r\n}\r\n\r\nexport const publicRoutes: routeType[] = [\r\n    {path: LOGIN, exact: true, component: Login}\r\n]\r\nexport const privateRoutes: routeType[] = [\r\n    {path: APP, exact: true, component: App}\r\n]","import React, {FC, useEffect,} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './components/Todolist';\r\nimport {useDispatch, } from \"react-redux\";\r\nimport {getFilteredTasks} from \"./hooks/getFilteredTasks\";\r\nimport {fetchTasks} from \"./store/action-creators/tasksActions\";\r\nimport {useRemoteState} from \"./hooks/useRemoteState\";\r\nimport {fetchingTodolists} from \"./store/action-creators/todoActions\";\r\nimport {useTypedSelector} from \"./hooks/useTypedSelector\";\r\n\r\n\r\nconst App: FC = () => {\r\n    const {initialTasks, initialTodoLists} = useRemoteState()\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const {tasks, todo} = useTypedSelector((state) => state)\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasks(initialTasks))\r\n        dispatch(fetchingTodolists(initialTodoLists))\r\n    }, [])\r\n    console.log(todo)\r\n    return (\r\n        <div className=\"App\">\r\n\r\n            { todo.length ?\r\n                todo.map((tl) => {\r\n                let filteredTasks = getFilteredTasks(tl.filter, tasks[tl.id])\r\n\r\n                return <Todolist\r\n                    key={tl.id}\r\n                    id={tl.id}\r\n                    tasks={filteredTasks}\r\n                    title={tl.title}\r\n                />\r\n            }) : ''}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport {privateRoutes, publicRoutes} from \"../router\";\r\nimport {useTypedSelector} from \"../hooks/useTypedSelector\";\r\n\r\nconst AppRouter = () => {\r\n    const {isAuth} = useTypedSelector(state => state.auth)\r\n    return (\r\n        isAuth ?\r\n            <Switch>\r\n                {privateRoutes.map(route =>\r\n                    <Route path={route.path}\r\n                           exact={route.exact}\r\n                           component={route.component}\r\n                           key={route.path}/>)}\r\n                <Redirect from='/' to='/'/>\r\n            </Switch> :\r\n            <Switch>\r\n                {publicRoutes.map(route =>\r\n                    <Route path={route.path}\r\n                           exact={route.exact}\r\n                           component={route.component}\r\n                           key={route.path}/>)}\r\n                <Redirect from='/' to='/login'/>\r\n            </Switch>\r\n    )\r\n}\r\n\r\n\r\nexport default AppRouter;","import * as React from 'react';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport AccountCircle from '@mui/icons-material/AccountCircle';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport Menu from '@mui/material/Menu';\r\nimport {Login} from \"@mui/icons-material\";\r\nimport {useTypedSelector} from \"../hooks/useTypedSelector\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setAuth} from \"../store/action-creators/authActions\";\r\n\r\nconst MenuAppBar = () => {\r\n    const {isAuth} = useTypedSelector(state => state.auth)\r\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n    const dispatch = useDispatch()\r\n    const setIsAuth = (isAuth: boolean) => {\r\n        dispatch(setAuth(isAuth))\r\n    }\r\n\r\n    const handleMenu = (event: React.MouseEvent<HTMLElement>) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n\r\n    return (\r\n        <Box sx={{flexGrow: 1}}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        sx={{mr: 2}}\r\n                    >\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                        myToDo\r\n                    </Typography>\r\n                    {isAuth ? (\r\n                        <div>\r\n                            <IconButton\r\n                                size=\"large\"\r\n                                aria-label=\"account of current user\"\r\n                                aria-controls=\"menu-appbar\"\r\n                                aria-haspopup=\"true\"\r\n                                onClick={handleMenu}\r\n                                color=\"inherit\"\r\n                            >\r\n                                <AccountCircle/>\r\n                            </IconButton>\r\n                            <Menu\r\n                                id=\"menu-appbar\"\r\n                                anchorEl={anchorEl}\r\n                                anchorOrigin={{\r\n                                    vertical: 'top',\r\n                                    horizontal: 'right',\r\n                                }}\r\n                                keepMounted\r\n                                transformOrigin={{\r\n                                    vertical: 'top',\r\n                                    horizontal: 'right',\r\n                                }}\r\n                                open={Boolean(anchorEl)}\r\n                                onClose={handleClose}\r\n                            >\r\n                                <MenuItem onClick={handleClose}>Profile</MenuItem>\r\n                                <MenuItem onClick={handleClose}>My account</MenuItem>\r\n                                <MenuItem onClick={() => {setIsAuth(false); handleClose()}}>Exit</MenuItem>\r\n                            </Menu>\r\n                        </div>\r\n                    ) : (<div>\r\n                        <IconButton\r\n                            size=\"small\"\r\n                            aria-label=\"account of current user\"\r\n                            aria-controls=\"menu-appbar\"\r\n                            aria-haspopup=\"true\"\r\n                            onClick={() => setIsAuth(true)}\r\n                            color=\"inherit\"\r\n                        >\r\n                            <Login/>\r\n                        </IconButton>\r\n                    </div>)}\r\n                </Toolbar>\r\n            </AppBar>\r\n        </Box>\r\n    );\r\n};\r\nexport default MenuAppBar","import {authConstants, setAuthType} from \"../auth-reducer\";\r\n\r\nexport const setAuth = (isAuth: boolean): setAuthType => {\r\n     return {type: authConstants.SET_AUTH, payload: isAuth}\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {createStore} from \"redux\";\r\nimport {rootReducer} from \"./store/root-Reducer\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport AppRouter from \"./components/AppRouter\";\r\nimport MenuAppBar from \"./components/Header\";\r\n\r\nconst store = createStore(rootReducer)\r\n\r\nReactDOM.render(<Provider store={store} >\r\n   <BrowserRouter>\r\n      <MenuAppBar />\r\n      <AppRouter/>\r\n   </BrowserRouter>\r\n</Provider>,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}